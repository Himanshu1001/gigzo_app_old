# Generated by Django 2.1.3 on 2019-01-03 07:35

import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number of the user', max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '999999999'", regex='^\\+?1?\\d{9,14}$')], verbose_name='phone_number')),
                ('first_name', models.CharField(blank=True, help_text="User's first name", max_length=255, null=True, verbose_name='first_name')),
                ('last_name', models.CharField(blank=True, help_text="User's last name", max_length=255, null=True, verbose_name='last_name')),
                ('active', models.BooleanField(default=True, help_text='Is user active', verbose_name='is_active')),
                ('staff', models.BooleanField(default=False, help_text='Is user a staff member', verbose_name='is_staff')),
                ('admin', models.BooleanField(default=False, help_text='Is user a superuser/admin', verbose_name='is_admin')),
                ('email', models.EmailField(blank=True, help_text='User email Id', max_length=255, null=True, unique=True, verbose_name='email_id')),
                ('gender', models.CharField(blank=True, choices=[('M', 'M - MALE'), ('F', 'F - FEMALE'), ('O', 'O - OTHER')], help_text='User gender', max_length=255, null=True, verbose_name='gender')),
                ('user_type', models.CharField(blank=True, choices=[('R', 'R - REQUESTOR'), ('G', 'G - GIGSTER')], help_text='Is user a Requestor/Gigster', max_length=255, null=True, verbose_name='user_type')),
                ('user_rating', models.FloatField(blank=True, help_text='User overall Rating', null=True, verbose_name='User Rating')),
                ('suspended', models.BooleanField(default=False, help_text='Is user suspended by the admin', verbose_name='is_user_suspended')),
                ('suspended_date', models.DateTimeField(auto_now=True, help_text='Auto added when the user is suspended', null=True, verbose_name='Suspended Date')),
                ('city', models.CharField(blank=True, help_text="User's City", max_length=255, null=True, verbose_name='City')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'Users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GigsterProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('gigster_project_choice', models.IntegerField(choices=[(1, 'A - ACCEPT'), (2, 'R - REJECT')], null=True, verbose_name='gigster_project_choice')),
                ('gigster_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, verbose_name='gigster_rating')),
                ('project_status', models.IntegerField(blank=True, choices=[(1, 'O - OPEN'), (2, 'A - ACCEPTED'), (3, 'C - CLOSED '), (4, 'S - STARTED'), (5, 'E - ENDED'), (6, 'A - APPROVED'), (7, 'R - RATED'), (8, 'P - PAID')], null=True)),
                ('pay_status', models.IntegerField(blank=True, choices=[(1, 'P - PAID'), (2, 'U - UNPAID')], null=True)),
            ],
            options={
                'verbose_name': 'Gigster Project',
                'verbose_name_plural': 'Gigster Projects',
                'db_table': 'Gigster_Project',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GigsterSkills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('experience', models.IntegerField(blank=True, choices=[(1, 'NO EXPERIENCE'), (2, '3-6 MONTHS EXPERIENCE '), (3, '6+ MONTHS EXPERIENCE ')], null=True, verbose_name='experience')),
                ('certificate', models.ImageField(blank=True, null=True, upload_to=core.models.upload_certificate)),
                ('experience_in_word', models.TextField(blank=True, null=True, verbose_name='experience_in_word')),
            ],
            options={
                'verbose_name': 'Gigster Skill',
                'verbose_name_plural': 'Gigster Skills',
                'db_table': 'Gigster Skills',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PhoneOTP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number to be validated', max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '999999999'", regex='^\\+?1?\\d{9,14}$')], verbose_name='phone_number')),
                ('otp', models.CharField(help_text='otp to be send to the Phone number', max_length=6, verbose_name='OTP')),
                ('count', models.IntegerField(default=0, help_text='Number of OTP send.', verbose_name='Attempted count')),
                ('is_verified', models.BooleanField(default=False, help_text='If it is true, this means user has validated otp correctly', verbose_name='is_verified')),
            ],
            options={
                'verbose_name': 'Phone OTP',
                'verbose_name_plural': 'Phone OTPs',
                'db_table': 'PhoneOTP',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('project_category', models.IntegerField(blank=True, choices=[(1, 'Events')], null=True)),
                ('project_title', models.CharField(blank=True, max_length=255, null=True)),
                ('project_type', models.IntegerField(blank=True, choices=[(1, 'S - SINGLE-DAY-JOB'), (2, 'M - MULTI-DAY-JOB')], null=True)),
                ('no_of_gigsters_required', models.CharField(blank=True, max_length=255, null=True)),
                ('gender_of_gigsters_required', models.IntegerField(blank=True, choices=[(1, 'M - MALE'), (2, 'F - FEMALE'), (3, 'N - NO PARTICULAR CHOICE')], null=True)),
                ('requirements', models.TextField(blank=True, null=True)),
                ('special_instruction', models.TextField(blank=True, null=True)),
                ('project_location', models.TextField(blank=True, null=True)),
                ('arrival_instructions', models.TextField(blank=True, null=True)),
                ('project_details', models.TextField(blank=True, null=True)),
                ('project_active', models.BooleanField(default=False)),
                ('duration', models.CharField(blank=True, max_length=255, null=True)),
                ('pay', models.CharField(blank=True, max_length=255, null=True)),
                ('requestor_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True)),
                ('project_subcategory', models.CharField(blank=True, max_length=255, null=True)),
                ('pay_status', models.IntegerField(blank=True, choices=[(1, 'P - PAID'), (2, 'U - UNPAID')], null=True)),
                ('project_status', models.IntegerField(blank=True, choices=[(0, 'P - PENDING'), (1, 'O - OPEN'), (2, 'F - FILLED'), (3, 'C - CLOSED '), (4, 'S- STARTED'), (5, 'E- ENDED'), (6, 'A - APPROVED'), (7, 'R - RATED')], default=0, null=True)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'Project',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Requestor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('company_name', models.CharField(blank=True, help_text="Requestor's Company name ", max_length=255, null=True, verbose_name='Company_name')),
                ('company_location', models.TextField(blank=True, help_text="Requestor's Company Address", null=True, verbose_name='Company_location')),
                ('postal_code', models.CharField(blank=True, help_text='Pin Code', max_length=255, null=True, verbose_name='Postal_code')),
                ('company_description', models.TextField(blank=True, help_text='Company Description', null=True, verbose_name='Company_description')),
                ('company_website', models.CharField(blank=True, help_text='Company Website', max_length=255, null=True, verbose_name='Company_website')),
                ('company_type', models.IntegerField(blank=True, choices=[(1, 'Private Limited Company'), (2, 'Partnership'), (3, 'Limited Liability Partnership'), (4, 'Proprietorship'), (5, 'One Person Company'), (6, 'Section 8 Company')], help_text='Company type of User', null=True, verbose_name='company_type')),
                ('designation', models.CharField(blank=True, help_text='Designation of Requestor', max_length=255, null=True, verbose_name='Requestor_designation')),
                ('linkedin_profile', models.URLField(blank=True, help_text='Requestor Linkedin Profile', max_length=255, null=True, verbose_name='Requestor_linkedin')),
                ('is_valid', models.BooleanField(default=False, help_text='Is Requestor verified by the admin')),
            ],
            options={
                'verbose_name': 'Requestor',
                'verbose_name_plural': 'Requestors',
                'db_table': 'Requestor',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('skill_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Skill')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'db_table': 'Skills',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserDevices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mac_address', models.CharField(max_length=255, verbose_name='mac_address')),
                ('platform', models.IntegerField(blank=True, choices=[(1, 'A- Android'), (2, 'I- IOS')], null=True, verbose_name='Platform')),
                ('version', models.CharField(blank=True, max_length=255, null=True, verbose_name='version')),
                ('device_id', models.BigIntegerField(default=1, verbose_name='device_id')),
                ('registration_source', models.IntegerField(blank=True, choices=[(1, 'PLAYSTORE - Android Playstore source'), (2, 'APPSTORE - Apple App Store'), (3, 'ADMIN- Added to the system by the Admin')], null=True, verbose_name='registration_source')),
            ],
            options={
                'verbose_name': 'User Device',
                'verbose_name_plural': 'User Devices',
                'db_table': 'user_devices',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Gigster',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Auto added at the time of creation only.', null=True, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Auto added everytime model is updated.', null=True, verbose_name='Updated Date')),
                ('gigster', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('vehicles_owned', models.IntegerField(blank=True, choices=[(1, 'B - BIKE'), (2, 'S - SCOOTY'), (3, 'C - CAR')], null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, help_text="Gigster's bio", null=True)),
                ('aadhar_front', models.ImageField(blank=True, null=True, upload_to=core.models.upload_aadhar_front)),
                ('aadhar_back', models.ImageField(blank=True, null=True, upload_to=core.models.upload_aadhar_back)),
                ('pan_card', models.ImageField(blank=True, null=True, upload_to=core.models.upload_pan_card)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to=core.models.upload_gigster_profile_photo)),
                ('driving_licence', models.ImageField(blank=True, null=True, upload_to=core.models.upload_driving_licence)),
                ('rating', models.FloatField(blank=True, help_text='Gigster overall Rating', null=True, verbose_name='Gigster Rating')),
            ],
            options={
                'verbose_name': 'Gigster',
                'verbose_name_plural': 'Gigsters',
                'db_table': 'Gigster',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='userdevices',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='requestor',
            name='user',
            field=models.OneToOneField(help_text='Instance of User Model', on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='requestor',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.Requestor'),
        ),
        migrations.AddField(
            model_name='gigsterskills',
            name='skill',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.Skills'),
        ),
        migrations.AddField(
            model_name='gigsterproject',
            name='project',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.Project'),
        ),
        migrations.AddField(
            model_name='gigsterskills',
            name='gigster',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.Gigster'),
        ),
        migrations.AddField(
            model_name='gigsterproject',
            name='gigster',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.Gigster'),
        ),
        migrations.AddField(
            model_name='gigster',
            name='skills',
            field=models.ManyToManyField(through='core.GigsterSkills', to='core.Skills'),
        ),
    ]
